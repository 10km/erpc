/*!
 * Copyright 2017 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

@include("myAlloc.h")
@output_dir("erpc_outputs")
program test;

import "../common/unit_test_common.erpc"

struct BaseSharedStruct
{
    int32 m
    int32 n
}

/*struct SharedStructMember
{
    int32 m
    int32 n
}

struct NoSharedStructMember
{
    int32 m
    int32 n
}

struct SharedStruct1
{
    SharedStructMember s @shared;
}

struct SharedStruct2
{
    NoSharedStructMember s @no_shared;
}

struct NoSharedStruct3
{
    SharedStructMember s @shared;
}*/

interface SharedService {
    sendReceiveBaseSharedStruct(in BaseSharedStruct a @shared) -> @shared BaseSharedStruct
    inoutBaseSharedStruct(inout BaseSharedStruct a @shared) -> void
    //inoutStruct1(inout SharedStruct1 a @shared) -> void
    //inoutStruct2(inout SharedStruct2 a @shared) -> void
    //inoutStruct3(inout NoSharedStruct3 a ) -> void
}
