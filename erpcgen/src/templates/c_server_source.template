{% if mlComment != ""%}
{$mlComment}

{% endif %}
{$commonHeader()}

#include "{$serverHeaderName}"
#include <new>
#include "erpc_port.h"
{% if empty(groupsServer) == false %}
extern "C"
{
{%  for groupInc in groupsServer if groupInc.name == group %}
{%   for inc in groupInc.includes %}
#include "{$inc}"
{%   endfor -- includes %}
{%  endfor -- includes %}
}
{% endif -- empty(groupsServer) %}

{$checkVersion()}

{$checkCrc()}

using namespace erpc;
#if !(__embedded_cplusplus)
using namespace std;
#endif

{$generateCrcVariable()}
{$> setSharedMemAddresses()}
{$> callbackTable(functions)}
{$> constantsDefinitions(consts)}
{$> structDeserialHeader(structsToServer, "def")}
{$> unionDeserialHeader(unionsToServer, "def")}
{$> structDeserialSource(structsToServer, "def")}
{$> unionDeserialSource(unionsToServer, "def")}
{$> structSerialHeader(structsToClient, "def")}
{$> unionSerialHeader(unionsToClient, "def")}
{$> structSerialSource(structsToClient, "def")}
{$> unionSerialSource(unionsToClient, "def")}
{$> structFreeSpaceHeader(structsServerFree, "def")}
{$> unionFreeSpaceHeader(unionsServerFree, "def")}
{$> structFreeSpaceSource(structsServerFree, "def")}
{$> unionFreeSpaceSource(unionsServerFree, "def")}
{$> structDeserialHeader(structsToServer, "noSharedMem")}
{$> unionDeserialHeader(unionsToServer, "noSharedMem")}
{$> structDeserialSource(structsToServer, "noSharedMem")}
{$> unionDeserialSource(unionsToServer, "noSharedMem")}
{$> structSerialHeader(structsToClient, "noSharedMem")}
{$> unionSerialHeader(unionsToClient, "noSharedMem")}
{$> structSerialSource(structsToClient, "noSharedMem")}
{$> unionSerialSource(unionsToClient, "noSharedMem")}
{$> structFreeSpaceHeader(structsServerFree, "noSharedMem")}
{$> unionFreeSpaceHeader(unionsServerFree, "noSharedMem")}
{$> structFreeSpaceSource(structsServerFree, "noSharedMem")}
{$> unionFreeSpaceSource(unionsServerFree, "noSharedMem")}
{% for iface in interfaces -- service subclass method impl %}

// Call the correct server shim based on method unique ID.
erpc_status_t {$iface.serviceClassName}::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    switch (methodId)
    {
{%  for fn in iface.functions %}
        case k{$iface.name}_{$fn.name}_id:
            return {$fn.name}_shim(codec, messageFactory, sequence);

{%  endfor -- fn %}
        default:
            return kErpcStatus_InvalidArgument;
    }
}
{%  for fn in iface.functions %}

// Server shim for {$fn.name} of {$iface.name} interface.
erpc_status_t {$iface.serviceClassName}::{$fn.name}_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
{% if errVar != "" %}
    erpc_status_t {$errVar}kErpcStatus_Success;

{% endif %}
{%   for param in fn.parameters %}
    {$param.variable}{% if param.isNullParam && errVar != "" %} = NULL{%endif%};
{%    if !param.shared %}
{%     if param.isNullable %}
{%      if param.allocateToClientAndServer || param.allocateToClient %}
{$> addIndent("    ", param.mallocServer)}
{%      endif -- allocate %}
{%     else -- notNullable %}
{$> addIndent("    ", param.mallocServer)}
{%     endif -- isNullable %}
{%    endif -- shared %}
{%   endfor -- param %}
{%   if fn.needNullVariableOnServer %}
    bool isNull;
{%   endif -- needNullVariableOnServer %}
{%   if fn.needTempVariableServer %}
    int32_t _tmp_local;
{%   endif %}
{%   if count(fn.parameters) > 0 or !empty(fn.needTempVariableServer) %}
{# need empty line for this case #}

{%   endif %}
    // startReadMessage() was already called before this shim was invoked.
{%   if fn.isSendValue %}

{%    for param in fn.parametersToServer if not param.serializedViaMember %}
{%     if param.isNullable %}
{$addInfraErrorChecks("    ", f_paramIsNullableDecode(param))}{$loop.addNewLineIfNotLast}
{%     else -- notNullable %}
{$addInfraErrorChecks("    ",param.coderCall.decode(param.coderCall))}{$loop.addNewLineIfNotLast}
{%     endif -- isNullable %}
{%    endfor -- parametersToServer %}
{%   endif -- isSendValue %}

{$addInfraErrorChecks("    ", s_endReadMessage)}
{%   for param in fn.parametersToClient %}
{%    if param.mallocServerOut != "" %}

{$> addIndent("    ", param.mallocServerOut)}
{%    endif %}
{%   endfor -- parametersToClient %}

    // Invoke the actual served function.
{%   if fn.returnValue.type.isNotVoid %}
    {$fn.returnValue.resultVariable}{% if fn.returnValue.isNullReturnType && generateInfraErrorChecks %} = NULL{%endif%};
{%   endif %}
{$addInfraErrorChecks("    ", fn.serverPrototype)}

{%   if fn.isReturnValue %}
    // preparing MessageBuffer for serializing data
{$addInfraErrorChecks("    ", s_prepareServerBufferForSend)}

    // preparing codec for serializing data
    codec->reset();

    // Build response message.
{$addInfraErrorChecks("    ", f_serverStartWriteMessage(iface.name, fn.name))}

{%    for param in fn.parametersToClient if not param.serializedViaMember %}
{%     if param.isNullable %}
    if ({$param.coderCall.name} != NULL)
    {
{$addInfraErrorChecks("        ", param.coderCall.encode(param.coderCall))}{$loop.addNewLineIfNotLast}
    }
{%     else -- isNullable %}
{$addInfraErrorChecks("    ", param.coderCall.encode(param.coderCall))}{$loop.addNewLineIfNotLast}
{%     endif -- isNullable %}
{%    endfor -- parametersToClient %}
{%    if fn.returnValue.type.isNotVoid %}
{%     if count(fn.parametersToClient) > 0 %}
{# need empty line for this case #}

{%     endif %}
{$addInfraErrorChecks("    ", fn.returnValue.coderCall.encode(fn.returnValue.coderCall))}
{%    endif -- notVoid %}

{$addInfraErrorChecks("    ", s_endWriteMessage)}
{%   endif -- isReturnValue %}
{%   if fn.isReturnValue %}
{# need empty line for this case #}

{%   endif %}
{%   for param in fn.paramsToFree %}
{$> addIndent("    ", param.coderCall.freeingCall(param.coderCall))}
{$> addIndent("    ", param.firstFreeingCall2.firstFreeingCall(param.firstFreeingCall2))}
{$> addIndent("    ", param.firstFreeingCall1.firstFreeingCall(param.firstFreeingCall1))}{$loop.addNewLineIfNotLast}
{%   endfor -- parameters %}
{%   if fn.returnValue.type.isNotVoid %}
{%    if count(fn.paramsToFree) > 0 %}
{# need empty line for this case #}

{%    endif %}
{$> addIndent("    ", fn.returnValue.coderCall.freeingCall(fn.returnValue.coderCall))}
{$> addIndent("    ", fn.returnValue.firstFreeingCall1.firstFreeingCall(fn.returnValue.firstFreeingCall1))}
{%   endif -- notVoid %}
{% if errVar != ""  %}
    return err;
{% else %}
    return kErpcStatus_Success;
{% endif %}
}
{%  endfor -- fn %}
{% endfor -- iface %}
{% for iface in interfaces %}
erpc_service_t create_{$iface.serviceClassName}()
{
    return new (nothrow) {$iface.serviceClassName}();
}
{% endfor -- iface %}
