/*
 * Generated by erpcgen {$erpcgenVersion} on {$todaysDate}.
 *
 * AUTOGENERATED - DO NOT EDIT
 */

{% if generateInfraErrorChecks %}
{%   set infraErrIndents = "    " %}
{%   set infraErrVar = "err = " %}
{% else %}
{%   set infraErrIndents = "" %}
{%   set infraErrVar = "" %}
{% endif %}
{% if generateAllocErrorChecks %}
{%   set allocErrIndents = "    " %}
{%   set allocErrVar = "err = " %}
{% else %}
{%   set allocErrIndents = "" %}
{%   set allocErrVar = "" %}
{% endif %}
{% if generateInfraErrorChecks or generateAllocErrorChecks %}
{%   set errVar = "err = " %}
{% else %}
{%   set errVar = "" %}
{% endif %}
#include "{$serverHeaderName}"
#include <new>
#include "erpc_port.h"

using namespace erpc;
#if !(__embedded_cplusplus)
using namespace std;
#endif
{$ constantsDefinitions(consts)}{$ structDeserialHeader(structsTo2Core)}{$ structDeserialSource(structsTo2Core)}{$ structSerialHeader(structsTo1Core)}{$ structSerialSource(structsTo1Core)}{$ structFreeSpaceHeader(structsServerFree)}{$ structFreeSpaceSource(structsServerFree)}
{% for iface in interfaces -- service subclass method impl %}

// Call the correct server shim based on method unique ID.
status_t {$iface.serviceClassName}::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * in, Codec * out)
{
    switch (methodId)
    {
{%  for fn in iface.functions %}
        case k{$iface.name}_{$fn.name}_id:
            return {$fn.name}_shim(in, out, sequence);

{%  endfor -- fn %}
        default:
            return kErpcStatus_InvalidArgument;
    }
}
{%  for fn in iface.functions %}

// Server shim for {$fn.name} of {$iface.name} interface.
status_t {$iface.serviceClassName}::{$fn.name}_shim(Codec * in, Codec * out, uint32_t sequence)
{
{% if errVar != ""  %}
    status_t {$errVar}kErpcStatus_Success;
{% endif %}
{%   for param in fn.parameters %}
    {$param.variable};
{%    if param.isNullable %}
{%     if param.allocateToClientAndServer || param.allocateToClient %}
{$> addIndent("    ", param.mallocServer)}
{%     endif -- allocate %}
{%    else -- notNullable %}
{$> addIndent("    ", param.mallocServer)}
{%    endif -- isNullable %}
{%   endfor -- param %}
{%   if fn.needNullVariableOnServer %}
    bool isNull;
{%   endif -- needNullVariableOnServer %}
{%   if fn.needEnumTmpServer %}
    int32_t enum_tmp_local;
{%   endif %}
{%   if count(fn.parameters) > 0 or  !empty(fn.needEnumTmpServer) %}
{# need empty line for this case #}

{%   endif %}
    // startReadMessage() was already called before this shim was invoked.
{%   if fn.isSendValue %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$infraErrVar}in->startReadStruct();
{$> addInfraErrorChecksEnd("    ") }
{%    for param in fn.parametersTo2Core %}
{%     if param.isNullable %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$infraErrVar}in->readNullFlag(&isNull);
{$infraErrIndents}    if (!isNull)
{$infraErrIndents}    {
{%      if param.allocateToServer %}
{$> addIndent(infraErrIndents & "        ", param.mallocServer)}
{%      endif -- allocate %}
{$addIndent(infraErrIndents & "        ", addInfraErrorChecks(param.coderCall, "decode"))}{$loop.addNewLineIfNotLast}
{$infraErrIndents}    }
{$infraErrIndents}    else
{$infraErrIndents}    {
{$infraErrIndents}        {$param.coderCall.name} = NULL;
{$infraErrIndents}    }
{$> addInfraErrorChecksEnd("    ") }
{%     else -- notNullable %}
{$addIndent("    ", addInfraErrorChecks(param.coderCall, "decode"))}{$loop.addNewLineIfNotLast}
{%     endif -- isNullable %}
{%    endfor -- parametersTo2Core %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$infraErrVar}in->endReadStruct();
{$> addInfraErrorChecksEnd("    ") }
{%   endif -- isSendValue %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$infraErrVar}in->endReadMessage();
{$> addInfraErrorChecksEnd("    ") }
{%   for param in fn.parametersTo1Core %}
{%    if param.mallocServerOut != "" %}

    {$param.mallocServerOut}
{%    endif %}
{%   endfor -- parametersTo1Core %}
    // Invoke the actual served function.
{%   if fn.returnValue.type.isNotVoid %}
    {$fn.returnValue.resultVariable};
{%   endif %}
    {$fn.serverPrototype};
{%   if fn.isReturnValue %}

    // Build response message.
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$infraErrVar}out->startWriteMessage(kReplyMessage, k{$iface.name}_service_id, k{$iface.name}_{$fn.name}_id, sequence);
{$> addInfraErrorChecksEnd("    ") }
{%    for param in fn.parametersTo1Core %}
{%     if param.isNullable %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    if ({$param.coderCall.name} == NULL)
{$infraErrIndents}    {
{$infraErrIndents}        {$infraErrVar}out->writeNullFlag(true);
{$infraErrIndents}    }
{$infraErrIndents}    else
{$infraErrIndents}    {
{$infraErrIndents}        {$infraErrVar}out->writeNullFlag(false);
{$addIndent(infraErrIndents &"        ", addInfraErrorChecks(param.coderCall, "encode"))}
{$> addInfraErrorChecksEnd("    ") }
{%     else -- isNullable %}
{$addIndent("    ", addInfraErrorChecks(param.coderCall, "encode"))}
{%     endif -- isNullable %}
{%    endfor -- parametersTo1Core %}
{%    if fn.returnValue.type.isNotVoid %}
{%     if count(fn.parametersTo1Core) > 0 %}
{# need empty line for this case #}

{%     endif %}
{$addIndent("    ", addInfraErrorChecks(fn.returnValue.coderCall, "encode"))}
{%    endif -- notVoid %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$infraErrVar}out->endWriteMessage();
{$> addInfraErrorChecksEnd("    ") }
{%   endif -- isReturnValue %}
{%   if fn.isReturnValue %}
{# need empty line for this case #}

{%   endif %}
{%   for param in fn.paramsToFree %}
{$> addIndent("    ", param.coderCall.freeingCall(param.coderCall))}
{$> addIndent("    ", param.firstFreeingCall2.firstFreeingCall(param.firstFreeingCall2))}
{$> addIndent("    ", param.firstFreeingCall1.firstFreeingCall(param.firstFreeingCall1))}{$loop.addNewLineIfNotLast}
{%   endfor -- parameters %}
{%   if fn.returnValue.type.isNotVoid %}
{%    if count(fn.paramsToFree) > 0 %}
{# need empty line for this case #}

{%    endif %}
{$> addIndent("    ", fn.returnValue.coderCall.freeingCall(fn.returnValue.coderCall))}
{$> addIndent("    ", fn.returnValue.firstFreeingCall1.firstFreeingCall(fn.returnValue.firstFreeingCall1))}
{%   endif -- notVoid %}
{% if errVar != ""  %}
    return err;
{% else %}
    return kErpcStatus_Success;
{% endif %}
}
{%  endfor -- fn %}
{% endfor -- iface %}
{% for iface in interfaces %}
erpc_service_t create_{$iface.serviceClassName}()
{
    return new (nothrow) {$iface.serviceClassName}();
}
{% endfor -- iface %}
