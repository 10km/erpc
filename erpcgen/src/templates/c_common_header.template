{% if mlComment != ""%}
{$mlComment}

{% endif %}
{$commonHeader()}

#if !defined({$commonGuardMacro})
#define {$commonGuardMacro}
{% if usedUnionType %}

#if defined(__CC_ARM)
#pragma anon_unions
#endif
{% endif -- usedUnionType %}

{% if not commonTypesFile == "" %}
// Common types header file
#include "{$commonTypesFile}"
{% else %}
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include "erpc_version.h"
#include "erpc_crc16.h"
{% for inc in includes %}
#include "{$inc}"
{% endfor -- includes %}

{$checkVersion()}

{$checkCrc()}

#if !defined(ERPC_TYPE_DEFINITIONS)
#define ERPC_TYPE_DEFINITIONS

{% if not empty(enums) %}

// Enumerators data types declarations
{%  for enum in enums %}
{% if enum.name != "" %}
{% endif %}
{$> enum.mlComment}
{%   if enum.name %}typedef {% endif --enum.name  %}enum{$addIndent(" ", enum.name)}{$enum.ilComment}
{
{%   for enumMember in enum.members %}
{$> addIndent("    ", enumMember.mlComment)}
    {$enumMember.memberDeclaration}{$enumMember.ilComment}
{%   endfor -- enumsMembers %}
}{$addIndent(" ", enum.name)};{$loop.addNewLineIfNotLast}
{%  endfor -- enums %}
{% endif -- enums %}
{% if not empty(aliases) %}

// Aliases data types declarations
{%  for alias in aliases %}
{$> alias.mlComment}
{%   if alias.typenameName == "" %}
typedef {$alias.unnamedType}
{
{%    for mem in alias.unnamed.members %}
    {$mem.memberDeclaration}
{%    endfor -- alias.unnamed.members %}
} {$alias.unnamedName};
{%   else -- alias.typenameName %}
typedef {$alias.typenameName};{$alias.ilComment}
{%   endif -- alias.typenameName %}
{%  endfor -- aliases %}
{% endif -- aliases %}
{% if nonExternalStruct || nonExternalUnion %}

// Structures/unions data types declarations
{%  for us in unionsStructs %}
{%   if us.isStruct == true %}
{%    if !us.isExternal %}
{$> us.mlComment}
struct {$us.name}{$us.ilComment}
{
{%     for mem in us.members %}
{$> addIndent("    ", mem.mlComment)}
    {$mem.memberDeclaration}{$mem.ilComment}
{$> addIndent("    ", mem.elementsCount)}
{%     endfor %}
};{$loop.addNewLineIfNotLast}
{%    endif -- !us.isExternal %}
{%   else -- us.type == "union" %}
{%   if !us.isExternal %}
{$> us.mlComment}
union {$us.name}{$us.ilComment}
{
{$us.membersData}
};{$loop.addNewLineIfNotLast}
{%   endif -- !us.isExternal %}
{%   endif -- us.type == "union/struct" %}
{%  endfor -- structs %}
{% endif -- nonExternalStruct || nonExternalUnion %}
{% if not empty(consts) %}

// Constant variable declarations
{%  for c in consts %}
{$> c.mlComment}
extern const {$c.typeAndName};{$c.ilComment}{$loop.addNewLineIfNotLast}
{%  endfor -- consts %}
{% endif -- consts %}

#endif // ERPC_TYPE_DEFINITIONS
{% endif -- commonTypesFile %}
{% if not genCommonTypesFile %}
{% for iface in interfaces %}

/*! @brief {$iface.name} identifiers */
enum _{$iface.name}_ids
{
    k{$iface.name}_service_id = {$iface.id},
{%  for fn in iface.functions %}
    k{$iface.name}_{$fn.name}_id = {$fn.id},
{%  endfor %}
};
{% endfor %}

#if defined(__cplusplus)
extern "C" {
#endif
{% for iface in interfaces if iface.isNonExternalInterface == true %}

{$> iface.mlComment}
//! @name {$iface.name}{$iface.ilComment}
//@{
{%  for fn in iface.functions if fn.isNonExternalFunction == true %}
{$> fn.mlComment}
{$fn.prototype};{$fn.ilComment}{$loop.addNewLineIfNotLast}
{%  endfor -- functions %}
//@}
{% endfor -- iface %}

#if defined(__cplusplus)
}
#endif
{% endif -- genCommonTypesFile %}

#endif // {$commonGuardMacro}
