/*
 * Generated by erpcgen {$erpcgenVersion} on {$todaysDate}.
 *
 * AUTOGENERATED - DO NOT EDIT
 */

{% if generateInfraErrorChecks %}
{%   set infraErrIndents = "    " %}
{% else %}
{%   set infraErrIndents = "" %}
{% endif %}
{% if generateAllocErrorChecks %}
{%   set allocErrIndents = "    " %}
{% else %}
{%   set allocErrIndents = "" %}
{% endif %}
{% if generateInfraErrorChecks or generateAllocErrorChecks %}
{%   set errVar = "err = " %}
{% else %}
{%   set errVar = "" %}
{% endif %}
#include "{$commonHeaderName}"
#include "client_manager.h"
#include "erpc_port.h"

using namespace erpc;
#if !(__embedded_cplusplus)
using namespace std;
#endif

extern ClientManager *g_client;
{$ constantsDefinitions(consts)}{$ structSerialHeader(structsTo2Core)}{$ structSerialSource(structsTo2Core)}{$ structDeserialHeader(structsTo1Core)}{$ structDeserialSource(structsTo1Core)}
{% for iface in interfaces %}
{%  for fn in iface.functions %}

// {$iface.name} interface {$fn.name} function client shim.
{$fn.prototype}
{
{% if errVar != ""  %}
    status_t {$errVar}kErpcStatus_Success;

{% endif %}
    // Get a new request.
{%   if !fn.isReturnValue %}
    RequestContext request = g_client->createRequest(true);
{%   else %}
    RequestContext request = g_client->createRequest(false);
{%   endif -- isReturnValue %}

    // Encode the request.
    Codec * out = request.getOutCodec();
{% if generateAllocErrorChecks %}
    if (out == NULL)
    {
        {$errVar}kErpcStatus_MemoryError;
    }
{%  endif %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$errVar}out->startWriteMessage({% if not fn.isReturnValue %}kOnewayMessage{%else%}kInvocationMessage{%endif%}, k{$iface.name}_service_id, k{$iface.name}_{$fn.name}_id, request.getSequence());
{$> addInfraErrorChecksEnd("    ") }
{%   if fn.isSendValue %}
{%    for param in fn.parametersTo2Core %}
{%     if param.isNullable %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    if ({$param.coderCall.name} == NULL)
{$infraErrIndents}    {
{$infraErrIndents}        {$errVar}out->writeNullFlag(true);
{$infraErrIndents}    }
{$infraErrIndents}    else
{$infraErrIndents}    {
{$infraErrIndents}        {$errVar}out->writeNullFlag(false);
{$addIndent(infraErrIndents & "         ", addInfraErrorChecks(param.coderCall, "encode"))}{$loop.addNewLineIfNotLast}
{$infraErrIndents}    }
{$> addInfraErrorChecksEnd("    ") }
{%     else -- isNullable %}
{$addIndent("    ", addInfraErrorChecks(param.coderCall, "encode"))}{$loop.addNewLineIfNotLast}
{%     endif -- isNullable %}
{%    endfor -- fn parametersTo2Core %}
{%   endif -- isSendValue %}

{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$errVar}out->endWriteMessage();
{$> addInfraErrorChecksEnd("    ") }

    // Send message to server
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$errVar}g_client->performRequest(request);
{$> addInfraErrorChecksEnd("    ") }
{%   if fn.isReturnValue %}

{%    if fn.needEnumTmpClient %}
    int32_t enum_tmp_local;
{%    endif %}
    Codec * in;
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    in = request.getInCodec();
{% if generateAllocErrorChecks %}
{$infraErrIndents}    if (in == NULL)
{$infraErrIndents}    {
{$infraErrIndents}        {$errVar}kErpcStatus_MemoryError;
{$infraErrIndents}    }
{%    endif %}
{$> addInfraErrorChecksEnd("    ") }
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    // Decode reply. startReadMessage has already been called for us by performRequest.
{$infraErrIndents}    {$errVar}in->startReadStruct();
{$> addInfraErrorChecksEnd("    ") }
{%    if fn.needNullVariableOnClient %}
    bool isNull;
{%    endif -- needNullVariableOnClient %}
{%    for param in fn.parametersTo1Core %}
{%     if param.isNullable %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$errVar}in->readNullFlag(&isNull);
{$infraErrIndents}    if (!isNull)
{$infraErrIndents}    {
{$> addIndent((infraErrIndents & "        ", param.mallocClient)}
{$addIndent((infraErrIndents & "        ", addInfraErrorChecks(param.coderCall, "decode"))}{$loop.addNewLineIfNotLast}
{$infraErrIndents}    }
{$infraErrIndents}    else
{$infraErrIndents}    {
{$infraErrIndents}        {$param.coderCall.name} = NULL;
{$infraErrIndents}    }
{$> addInfraErrorChecksEnd("    ") }
{%     else -- notNullable %}
{$> addIndent("    ", param.mallocClient)}
{$addIndent("    ", addInfraErrorChecks(param.coderCall, "decode"))}{$loop.addNewLineIfNotLast}
{%     endif -- isNullable %}
{%    endfor -- fn parametersTo1Core %}
{%    if fn.returnValue.type.isNotVoid %}
{%     if count(fn.parametersTo1Core) > 0 %}
{# need empty line for this case #}

{%     endif %}
    {$fn.returnValue.resultVariable};
{$> addIndent("    ", fn.returnValue.firstAlloc)}
{$addIndent("    ", addInfraErrorChecks(fn.returnValue.coderCall, "decode"))}
{%    endif -- isNotVoid %}
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$errVar}in->endReadStruct();
{$> addInfraErrorChecksEnd("    ") }
{$> addInfraErrorChecksBegin("    ") }
{$infraErrIndents}    {$errVar}in->endReadMessage();
{$> addInfraErrorChecksEnd("    ") }
{%   endif -- isReturnValue %}

    // Dispose of the request.
    g_client->releaseRequest(request);
{% if errVar != ""  %}
{# Handle error #}

    if (err)
    {
        ClientManager::error_handler_t errorHandler = g_client->getErrorHandler();
        if (errorHandler != NULL)
        {
            (*errorHandler)(err);
        }
        {% if fn.returnValue.type.isNotVoid %}return {$fn.returnValue.errorReturnValue};{% endif -- isNotVoid %}
    }
{% endif %}

    return{% if fn.returnValue.type.isNotVoid %} result{% endif -- isNotVoid %};
}
{%  endfor -- fn %}
{% endfor -- iface %}
